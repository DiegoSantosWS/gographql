GRAPHQL DO LADO BACKEND
Criando GraphQL com Go e gqlgen

DIEGO SANTOS
Back-end at Fliper
diegosantosws1@gmail.com
@diegosantosws
http://abre.ai/meu_linkedin

* 

.background images/medo.gif
# .image images/medo.gif _ 900

* INTRODUÇÃO

Nos últimos anos o *GraphQL* tem se tornado bem popular e cada vez mais as empresas tem adotado o uso da *especificação* em suas aplicações, seja em sites, sistemas ou aplicativos móveis.

* O QUE É GRAPHQL?

Como o próprio site define:

.html codes/citacao.html

* ESPECIFICAÇÃO

*GraphQL* também é uma _spec_ (especificação) que descreve recursos e características para comunicação cliente/servidor.

A especificação surgiu por volta de 2012, quando *Facebook* teve a necessidade de reconstruir seu aplicativo móvel, visto que na época era apenas uma _view_ do site móvel.

Por se tratar de uma _spec_, um serviço *GraphQL* é independente do meio de transporte, porém, é usado na maioria das vezes sob o protocolo *HTTP*.

* TYPES 

No *GraphQL* existem alguns types (tipos) pré-definidos e que são conhecidos como *root* *type* (tipos raiz) e *types* *scalar*.

1 - ROOT TYPES

- QUERY
- MUTATION
- SUBSCRIPTION
- INPUT 


* 

2 - TIPOS ESCALARES 

- Time
- Int*
- Float*
- String*
- Boolean*
- ID*

Alguns tipos escalares vem embutidos no graphql, são os marcados com *** e são bem úteis, mas pode ter situções em que você precisará personalizar seus próprios tipos.

OBS: Esses tipos não são considerados como objetos pois não possuem campos

Um exemplo é o tipo *Time* usado no campo *Created* do schema *Person*

* EXEMPLO DE SCHEMAS PARA TIPOS ESCALARES.

.code codes/example.graphql

* QUERYS

É definida como *root* *type*. Os campos disponíves na query para consultas são definidos no _SCHEMA_.

OBS: Uma query serve para realizar consultas. É o mesmo que fazer uma requisição usando o verbo GET. 

"NA VERDADE ESTAMOS USANDO ELE NO *RESOLVER* NA MAIORIA DAS CONSULTAS"


* EXEMPLO DE SCHEMA PARA CHAMADAS DAS QUERY E MUTATION

.code codes/definicaoquery.graphql

Quando começamos a usar *GraphQL* precisamos instalar um cliente para testarmos _querys_ e _motations_, esse cliente contém um _playground_ onde vamos executar as chamadas, um exemplo online é: [[https://swapi.graph.cool/][swapi]]

* EXEMPLO DE USABILIDADE PARA QUERY

.code codes/exemplos.json

* MUTATION

As *mutations* (mutações) também são definidas em um _SCHEMA_ assim como as _querys_, possuem seus tipos/objetos personalizados, que devem ser adicionados no _schema_. Não existe muita diferença no modo de definir uma *mutação* ou *query*.

A diferença existente esta na interação. Uma forma de usar uma *MUTATION* é quando houver uma ação, evento de mudar algo que diz respeito ao estado de um registro.

Uma *MUTATION* deve representar os verbos HTTP em sua aplicação.

* EXEMPLO

.code codes/mutations.graphql

* TYPE INPUT

Este tipo costuma ser usado quando tempos muitos parâmetros a ser passado para uma *mutation*. O _INPUT_ é uma forma de organizar.
O _INPUT_ é semelhante a um objeto *GraphQL* exceto porque é usado somente como argumento de entrada, para uma *mutation*.

* RESOLVERS

*Resolver* é uma função que devolve dados para um campo  em particular. *Resolvers* devolvem dados no tipo e formato especificados pelo _schema_.

Para exemplificar um resolver vamos usar uma lib e falar um pouco de *Go* que é o objetivo.

* 

.background images/feliz.gif

* GQLGEN

O *gqlgen* é uma lib, feita puramente em *Go*, que ajuda na criação do *GraphQL*. 

O *gqlgen* é o mistério a ser desvendado. A lib trabalha com contexto o tempo inteiro e quando escolhi usá-la levei em consideração o fato dela ajudar na criação de todo o processo. 

*Mas,* *como* *assim?*

Em outras lib's, como *go-graphql*, temos que criar tudo, então podemos ganhar um pouco de performance e autonomia do código.
Porém, a nível de praticidade perdemos muito. Visto que na época eu precisava de praticidade deixei um pouco da performance para refatoração.

* INICIANDO GQLGEN

Para iniciar o uso do *gqlgen*, usamos os comandos referente a qualquer lib *Go*:

 go get github.com/99designs/gqlgen

EXEMPLO DO SITE

 $ mkdir gqlgen-todos
 $ cd gqlgen-todos
 $ go mod init github.com/[username]/gqlgen-todos
 $ go run github.com/99designs/gqlgen init 

Seguindo o exemplo acima conseguimos inicar um projeto.

* COMANDOS 

 go run github.com/99designs/gqlgen init 

 go run github.com/99designs/gqlgen -v 

Uma forma de simplificar o comandos acima é usando o comando abaixo.

 go generated ./...

Para usá-lo é necessário add uma especificação da lib, no arquivo resolver entre a chamada do _package_ e _import_.

 //go:generate go run github.com/99designs/gqlgen

* 

Após o procedimento anterior, o *gqlgen* cria alguns arquivos / diretórios, sendo eles:

- gqlgen.yml 
O *gqlgen.yml* é o arquivo de configuração do código, é neste arquivos que definimos a estrutura que devemos usar. (caso não definirmos ele vai criar uma confome o *schema* definido)

- generated.go
Este arquivo contém a maior parte do processo de execução do sistema.

- models_gen.go
Caso o *gqlgen* gere o código, ele vai está neste arquivo (Se mudar algo aqui vai dar pau).

* 

- resolver.go

Este arquivo vai conter as funções de _query_ e _mutations_ e o *generated* vai entrar em contato com esse arquivo para obter os dados solicitados.

- server/server.go

Onde existe a configuração do nosso servidor.

* 

Agora sim podemos pensar em *resolvers*, mas para isso precisamos manipular o arquivo *resolver.go*, pois sempre que criarmos uma nova _query_ ou _mutation_ devemos rodar o comando:

 go run github.com/99designs/gqlgen

pois é ele que exclue o *models_gen.go* e *resolver* e recria tudo novamente. A melhor forma é criar 2 novos arquivos e add o resolve no _.gitgnore_. 

 
## No exemplo desta apresentação criei um diretorio *manager* e copiei os arquivos *generated*, *models_gen* e *resolver* 

A seguir um exemplo de _queryRevolver_


* 

.code codes/r.go

* 

É bem fácil trabalhar com *resolvers* no gqlgen, pois essa função é criada automaticamente.

A única coisa que temos que fazer é copiá-la para o arquivo de *resolver* específico.

* ERRORS

O *gqlgen* é composto de funções para tratar os erros que por ventura venham a acontecer.

Uma boa prática é crar uma função que trata esses erros.

* EXEMPLOS DE ERROS

- CHAMADA PARA ERRO SIMPLES

 gqlerror.Errorf(" Algum erro aconteceu. Error [%s]", err)

- CHAMADA PARA ERRO COMPOSTO 

 graphql.AddError(ctx, &gqlerror.Error{
    Message: "Erro Teste",
    Extensions: map[string]interface{}{
        "status": "500",
    },
 })

* EXEMPLO USANDO FUNÇÃO

.code codes/simpleErro.go

* 

Então é isso *Gophers*... mas, ainda temos algumas pendências:

- Querys complexas
- Subscriptions
- Paginação

Promento fazer o complemento dessa palestra se todos começarem a seguir a comunidade *Golang* *SP* nas redes sociais: 

- youtube.com/c/GolangSP
- instagram.com/golang_sp/
- twitter.com/golang_sp
- linkedin.com/company/golangsp/

e é claro, tem que rolar postagens com a hashtag *#queryscomplexas*.

*kkkk* brincadeiras à parte, mas antes do fim do ano farei uma nova focada nesses 3 temas.

* 

.image images/mineiro.png 500 _

* 

.background images/aplausos.gif


* LINKS / REFERÊNCIAS

.link https://github.com/graphql-go/graphql go-graphql
.link https://swapi.co API EXEMPLO
.link https://gqlgen.com SITE GQLGEN
.link https://github.com/gobelohorizonte GITHUB GO-BH 
.link https://t.me/go_br GO BR
.link https://github.com/DiegoSantosWS MEU GITHUB
.link https://t.me/go_bh GRUPO TELEGRAM

* 

.background images/questions.gif

